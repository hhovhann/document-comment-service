{
  "info": {
    "name": "Document Commenting API",
    "description": "Postman collection for testing the Collaborative Document Commenting Backend API",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Documents",
      "item": [
        {
          "name": "Get All Documents",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/documents",
              "host": ["{{base_url}}"],
              "path": ["api", "documents"]
            }
          },
          "response": []
        },
        {
          "name": "Get All Documents with Title Filter",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/documents?title=sample",
              "host": ["{{base_url}}"],
              "path": ["api", "documents"],
              "query": [
                {
                  "key": "title",
                  "value": "sample"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Document by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/documents/{{document_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "documents", "{{document_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Create Document",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const responseJson = pm.response.json();",
                  "    pm.collectionVariables.set('document_id', responseJson.id);",
                  "    console.log('Document ID saved:', responseJson.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"My Sample Document\",\n  \"content\": \"This is the first paragraph of my document. It contains some introductory text that explains what this document is about.\\n\\nThis is the second paragraph with more detailed information. This paragraph contains important data that might need comments and feedback from reviewers.\\n\\nThis is the third paragraph that concludes the document. It provides a summary and final thoughts on the topic discussed above.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/documents",
              "host": ["{{base_url}}"],
              "path": ["api", "documents"]
            }
          },
          "response": []
        },
        {
          "name": "Update Document",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Document Title\",\n  \"content\": \"This is the updated content of the document. The first paragraph has been revised.\\n\\nThis is the updated second paragraph with new information and improved clarity.\\n\\nThis is the updated third paragraph with additional conclusions.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/documents/{{document_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "documents", "{{document_id}}"]
            }
          },
          "response": []
        },
        {
          "name": "Delete Document",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/documents/{{document_id}}",
              "host": ["{{base_url}}"],
              "path": ["api", "documents", "{{document_id}}"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Comments",
      "item": [
        {
          "name": "Get All Comments for Document",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/documents/{{document_id}}/comments",
              "host": ["{{base_url}}"],
              "path": ["api", "documents", "{{document_id}}", "comments"]
            }
          },
          "response": []
        },
        {
          "name": "Get Comments by Author",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/documents/{{document_id}}/comments?author=John Doe",
              "host": ["{{base_url}}"],
              "path": ["api", "documents", "{{document_id}}", "comments"],
              "query": [
                {
                  "key": "author",
                  "value": "John Doe"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get Comments by Paragraph",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/documents/{{document_id}}/comments?paragraphIndex=1",
              "host": ["{{base_url}}"],
              "path": ["api", "documents", "{{document_id}}", "comments"],
              "query": [
                {
                  "key": "paragraphIndex",
                  "value": "1"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Create Comment - Character-Based",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"This section needs clarification. The wording could be improved for better understanding.\",\n  \"author\": \"John Doe\",\n  \"location\": {\n    \"startChar\": 50,\n    \"endChar\": 100\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/documents/{{document_id}}/comments",
              "host": ["{{base_url}}"],
              "path": ["api", "documents", "{{document_id}}", "comments"]
            }
          },
          "response": []
        },
        {
          "name": "Create Comment - Paragraph-Based",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"Great point in this paragraph! This provides excellent context for the overall discussion.\",\n  \"author\": \"Jane Smith\",\n  \"location\": {\n    \"paragraphIndex\": 1\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/documents/{{document_id}}/comments",
              "host": ["{{base_url}}"],
              "path": ["api", "documents", "{{document_id}}", "comments"]
            }
          },
          "response": []
        },
        {
          "name": "Create Comment - Anchor Text",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"This phrase is key to understanding the main concept. Consider highlighting it more prominently.\",\n  \"author\": \"Bob Wilson\",\n  \"location\": {\n    \"anchorText\": \"important data\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/documents/{{document_id}}/comments",
              "host": ["{{base_url}}"],
              "path": ["api", "documents", "{{document_id}}", "comments"]
            }
          },
          "response": []
        },
        {
          "name": "Create Comment - Line Number",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"This line could be refactored for better readability.\",\n  \"author\": \"Alice Johnson\",\n  \"location\": {\n    \"lineNumber\": 3\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/documents/{{document_id}}/comments",
              "host": ["{{base_url}}"],
              "path": ["api", "documents", "{{document_id}}", "comments"]
            }
          },
          "response": []
        },
        {
          "name": "Create Comment - Multiple Location Strategies",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"This section combines multiple location strategies for robust positioning.\",\n  \"author\": \"Charlie Brown\",\n  \"location\": {\n    \"startChar\": 150,\n    \"endChar\": 200,\n    \"paragraphIndex\": 2,\n    \"anchorText\": \"summary\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/documents/{{document_id}}/comments",
              "host": ["{{base_url}}"],
              "path": ["api", "documents", "{{document_id}}", "comments"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Get Non-existent Document",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/documents/00000000-0000-0000-0000-000000000000",
              "host": ["{{base_url}}"],
              "path": ["api", "documents", "00000000-0000-0000-0000-000000000000"]
            }
          },
          "response": []
        },
        {
          "name": "Create Document with Invalid Data",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"\",\n  \"content\": \"\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/documents",
              "host": ["{{base_url}}"],
              "path": ["api", "documents"]
            }
          },
          "response": []
        },
        {
          "name": "Create Comment with Invalid Location",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"This comment has an invalid location\",\n  \"author\": \"Test User\",\n  \"location\": {\n    \"paragraphIndex\": 999\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/documents/{{document_id}}/comments",
              "host": ["{{base_url}}"],
              "path": ["api", "documents", "{{document_id}}", "comments"]
            }
          },
          "response": []
        },
        {
          "name": "Create Comment with Invalid Character Range",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"This comment has invalid character range\",\n  \"author\": \"Test User\",\n  \"location\": {\n    \"startChar\": 9999,\n    \"endChar\": 10000\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/documents/{{document_id}}/comments",
              "host": ["{{base_url}}"],
              "path": ["api", "documents", "{{document_id}}", "comments"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "Optimistic Locking Tests",
      "item": [
        {
          "name": "Create Document for Concurrency Test",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test creates a document and stores its ID and version for concurrency testing",
                  "pm.test(\"Document created successfully\", function () {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson).to.have.property('id');",
                  "    pm.expect(responseJson).to.have.property('version');",
                  "    ",
                  "    // Store the document ID and version for subsequent tests",
                  "    pm.collectionVariables.set('concurrency_document_id', responseJson.id);",
                  "    pm.collectionVariables.set('concurrency_document_version', responseJson.version);",
                  "    ",
                  "    console.log('Document created with ID:', responseJson.id, 'Version:', responseJson.version);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Concurrency Test Document\",\n  \"content\": \"This document will be used to test concurrent updates.\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/documents",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "documents"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Document - Success with Version",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test performs an update with correct version which should succeed",
                  "pm.test(\"Update with correct version should succeed\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.title).to.eql('Updated with Version');",
                  "    pm.expect(responseJson.version).to.be.above(parseInt(pm.collectionVariables.get('concurrency_document_version')));",
                  "    ",
                  "    // Store the new version",
                  "    pm.collectionVariables.set('concurrency_document_version', responseJson.version);",
                  "    console.log('Update successful. New version:', responseJson.version);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated with Version\",\n  \"version\": {{concurrency_document_version}}\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/documents/{{concurrency_document_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "documents",
                "{{concurrency_document_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Update Document - Version Conflict (Should Fail)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test attempts to update with an old version, which should fail",
                  "pm.test(\"Update with old version should fail\", function () {",
                  "    pm.response.to.have.status(409);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.error).to.eql('Optimistic Locking Conflict');",
                  "    pm.expect(responseJson.message).to.include('Document has been modified by another user');",
                  "    ",
                  "    console.log('Update failed as expected with conflict error');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"content\": \"This should fail due to version conflict\",\n  \"version\": 0\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/documents/{{concurrency_document_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "documents",
                "{{concurrency_document_id}}"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Verify Document State After Updates",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This test verifies the final state of the document",
                  "pm.test(\"Final document state should be correct\", function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    ",
                  "    // Should have title from versioned update",
                  "    pm.expect(responseJson.title).to.eql('Updated with Version');",
                  "    // Should have content from backward compatible update",
                  "    pm.expect(responseJson.content).to.eql('Updated without version');",
                  "    // Should have a version number",
                  "    pm.expect(responseJson).to.have.property('version');",
                  "    ",
                  "    console.log('Final document state verified successfully');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/documents/{{concurrency_document_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "api",
                "documents",
                "{{concurrency_document_id}}"
              ]
            }
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "document_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "concurrency_document_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "concurrency_document_version",
      "value": "0",
      "type": "string"
    }
  ]
}